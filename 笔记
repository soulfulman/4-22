//操作对象是字符串\0
void*my_memcpy(void* dest, const void* src, size_t num)
{
	void* ret = dest;
	assert(dest != NULL);
	assert(dest != NULL);
	while(num--)
	{
	*(char*)dest = *(char*)src; 
	++(char*)dest;
	++(char*)src;
	}
	
	return ret;
}
int main()

{
	int arr1[] = { 1,2,3,4,5 };
	int arr2[5] = { 0 };
	my_memcpy(arr2, arr1, sizeof(arr1));
	return 0;
}
//memmove 可以处理内存重叠的情况
//memcp可以处理不重叠的内存拷贝
void* my_memmove(void* dest, const void* src, size_t count)


{
	void* ret = dest;
	assert(dest != NULL);
	assert(src != NULL);
	if (dest < src)
	{
		while (count--)
		{
			*(char*)dest = *(char*)src;
			++(char*)dest;
			++(char*)src;
		}
	}
	else
	{
		while (count--)
		{
			*((char*)dest + count) = *((char*)src + count);
		}
	}
	return  ret;
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int i = 0;
	my_memmove(arr + 2, arr, 20);
	for (i = 0; i < 10; i++)
	{
		printf("%d", arr[i]);
	}
	return 0;
}
//memset内存设置
int main()
{
	int arr[10] = { 0 };//40个字节
	memset(arr, 1, 10);
	return 0;
}
//复杂对象，复杂对象 枚举 联合
struct stu
{
	char name[20];
};
int main()
{
	struct stu s1;
	struct stu s2;
	return 0;
}
struct//匿名结构体
{
	int a;
	char c;
}sa;
int main()
{
	return 0;
}
struct Node
{
	int data;
	struct Node* next;
};
int main()
{
		return 0;
}
typedef struct Node
{

}Node;
struct s1
{
	char c1;
	int a;
	char c2;
};
struct s3
{
	double d;
	char c;
	int i;
};
int main()
{
	struct S1 s1 = { 0 };
	printf("%d\n", sizeof(s1));
	return 0;
